
task_schedl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000544  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006f0  080006f0  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006f0  080006f0  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  080006f0  080006f0  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006f0  080006f0  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006f0  080006f0  000016f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006f4  080006f4  000016f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080006f8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002010  2**0
                  CONTENTS
 10 .bss          00000030  20000010  20000010  00002010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  00002010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000553  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002d6  00000000  00000000  00002593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  00002870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b2  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001c91  00000000  00000000  00002a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cb1  00000000  00000000  000046b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007d46  00000000  00000000  00005364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000d0aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002cc  00000000  00000000  0000d0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0000d3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080006d8 	.word	0x080006d8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080006d8 	.word	0x080006d8

080001ec <main>:
//A global variable that tracks the current task
uint8_t current_task = 0; // It's initialized with task one first.


int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	//Enable Some processor fault exceptions mem, bus and usage.
	processor_fault_enable();
 80001f0:	f000 f906 	bl	8000400 <processor_fault_enable>

	//Do this before calling the function init_stack_tasks function
	init_schd_task(SCHED_STACK_START);
 80001f4:	480e      	ldr	r0, [pc, #56]	@ (8000230 <main+0x44>)
 80001f6:	f000 f8b5 	bl	8000364 <init_schd_task>

	task_handler_holder[0] = (uintptr_t)task1;
 80001fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000234 <main+0x48>)
 80001fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000238 <main+0x4c>)
 80001fe:	601a      	str	r2, [r3, #0]
	task_handler_holder[1] = (uintptr_t)task2;
 8000200:	4a0e      	ldr	r2, [pc, #56]	@ (800023c <main+0x50>)
 8000202:	4b0d      	ldr	r3, [pc, #52]	@ (8000238 <main+0x4c>)
 8000204:	605a      	str	r2, [r3, #4]
	task_handler_holder[2] = (uintptr_t)task3;
 8000206:	4a0e      	ldr	r2, [pc, #56]	@ (8000240 <main+0x54>)
 8000208:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <main+0x4c>)
 800020a:	609a      	str	r2, [r3, #8]
	task_handler_holder[3] = (uintptr_t)task4;
 800020c:	4a0d      	ldr	r2, [pc, #52]	@ (8000244 <main+0x58>)
 800020e:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <main+0x4c>)
 8000210:	60da      	str	r2, [r3, #12]


	init_stack_tasks();
 8000212:	f000 f8ad 	bl	8000370 <init_stack_tasks>
	led_init();
 8000216:	f000 f993 	bl	8000540 <led_init>

	init_systick_tim(TICK_HZ);
 800021a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800021e:	f000 f863 	bl	80002e8 <init_systick_tim>

	set_sp_to_psp();
 8000222:	f000 f91f 	bl	8000464 <set_sp_to_psp>

	task1();
 8000226:	f000 f80f 	bl	8000248 <task1>


    /* Loop forever */
	for(;;);
 800022a:	bf00      	nop
 800022c:	e7fd      	b.n	800022a <main+0x3e>
 800022e:	bf00      	nop
 8000230:	2001ec00 	.word	0x2001ec00
 8000234:	08000249 	.word	0x08000249
 8000238:	2000002c 	.word	0x2000002c
 800023c:	08000271 	.word	0x08000271
 8000240:	08000299 	.word	0x08000299
 8000244:	080002c1 	.word	0x080002c1

08000248 <task1>:
}

void task1(){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	while(1){
		//Turn green LED ON and OFF
		led_on(LT_GREEN);
 800024c:	2002      	movs	r0, #2
 800024e:	f000 f9a9 	bl	80005a4 <led_on>
		delay(DELAY_COUNT_1MS);
 8000252:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8000256:	f000 f95e 	bl	8000516 <delay>
		led_off(LT_GREEN);
 800025a:	2002      	movs	r0, #2
 800025c:	f000 f9c8 	bl	80005f0 <led_off>
		delay(DELAY_COUNT_1S);
 8000260:	4802      	ldr	r0, [pc, #8]	@ (800026c <task1+0x24>)
 8000262:	f000 f958 	bl	8000516 <delay>
		led_on(LT_GREEN);
 8000266:	bf00      	nop
 8000268:	e7f0      	b.n	800024c <task1+0x4>
 800026a:	bf00      	nop
 800026c:	001312d0 	.word	0x001312d0

08000270 <task2>:
	}
}

void task2(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	while(1){
		//Turn green LED ON and OFF
		led_on(LT_RED);
 8000274:	2003      	movs	r0, #3
 8000276:	f000 f995 	bl	80005a4 <led_on>
		delay(DELAY_COUNT_125MS);
 800027a:	4805      	ldr	r0, [pc, #20]	@ (8000290 <task2+0x20>)
 800027c:	f000 f94b 	bl	8000516 <delay>
		led_off(LT_RED);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 f9b5 	bl	80005f0 <led_off>
		delay(DELAY_COUNT_1S);
 8000286:	4803      	ldr	r0, [pc, #12]	@ (8000294 <task2+0x24>)
 8000288:	f000 f945 	bl	8000516 <delay>
		led_on(LT_RED);
 800028c:	bf00      	nop
 800028e:	e7f1      	b.n	8000274 <task2+0x4>
 8000290:	0002625a 	.word	0x0002625a
 8000294:	001312d0 	.word	0x001312d0

08000298 <task3>:
	}
}


void task3(){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	while(1){
		led_on(LT_RED);
 800029c:	2003      	movs	r0, #3
 800029e:	f000 f981 	bl	80005a4 <led_on>
		delay(DELAY_COUNT_1S);
 80002a2:	4805      	ldr	r0, [pc, #20]	@ (80002b8 <task3+0x20>)
 80002a4:	f000 f937 	bl	8000516 <delay>
		led_off(LT_RED);
 80002a8:	2003      	movs	r0, #3
 80002aa:	f000 f9a1 	bl	80005f0 <led_off>
		delay(DELAY_COUNT_250MS);
 80002ae:	4803      	ldr	r0, [pc, #12]	@ (80002bc <task3+0x24>)
 80002b0:	f000 f931 	bl	8000516 <delay>
		led_on(LT_RED);
 80002b4:	bf00      	nop
 80002b6:	e7f1      	b.n	800029c <task3+0x4>
 80002b8:	001312d0 	.word	0x001312d0
 80002bc:	0004c4b4 	.word	0x0004c4b4

080002c0 <task4>:
	}
}


void task4(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	while(1){
		led_on(LT_GREEN);
 80002c4:	2002      	movs	r0, #2
 80002c6:	f000 f96d 	bl	80005a4 <led_on>
		delay(DELAY_COUNT_250MS);
 80002ca:	4806      	ldr	r0, [pc, #24]	@ (80002e4 <task4+0x24>)
 80002cc:	f000 f923 	bl	8000516 <delay>
		led_off(LT_GREEN);
 80002d0:	2002      	movs	r0, #2
 80002d2:	f000 f98d 	bl	80005f0 <led_off>
		delay(DELAY_COUNT_1MS);
 80002d6:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80002da:	f000 f91c 	bl	8000516 <delay>
		led_on(LT_GREEN);
 80002de:	bf00      	nop
 80002e0:	e7f0      	b.n	80002c4 <task4+0x4>
 80002e2:	bf00      	nop
 80002e4:	0004c4b4 	.word	0x0004c4b4

080002e8 <init_systick_tim>:
	}
}



void init_systick_tim(uint32_t tick_hz){
 80002e8:	b480      	push	{r7}
 80002ea:	b087      	sub	sp, #28
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]

	uint32_t *pSRVR = (uint32_t*)0xE000E014;      //SYSTICK reload value register.
 80002f0:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <init_systick_tim+0x70>)
 80002f2:	617b      	str	r3, [r7, #20]
	uint32_t count_value = (SYSTICK_TIM_CLK /tick_hz) - 1; //This should give 1600 to achieve a 1mSec per tick
 80002f4:	4a19      	ldr	r2, [pc, #100]	@ (800035c <init_systick_tim+0x74>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002fc:	3b01      	subs	r3, #1
 80002fe:	613b      	str	r3, [r7, #16]


	*pSRVR &= ~(0x00FFFFFF); //clear the value of the SVR
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	601a      	str	r2, [r3, #0]


	*pSRVR |= count_value; //Load the count value into the SVR
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	431a      	orrs	r2, r3
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	601a      	str	r2, [r3, #0]
	 * Enable the Counter by setting the (ENABLE) bit field [0] of the register to 1.
	 * Enable the systick to trigger an exception when count down is 0 by setting the second bit field (TICKINT)[1] to 1.
	 * Select the internal clock source to be internal by setting the second bit field (TICKINT)[1] to 1.
	 */

	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000318:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <init_systick_tim+0x78>)
 800031a:	60fb      	str	r3, [r7, #12]

	//Clear the first three bit fields.
	*pSCSR &= ~(0x00000007);
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f023 0207 	bic.w	r2, r3, #7
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1 << 1); //Enables the systick exception request at 0 countdown.
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f043 0202 	orr.w	r2, r3, #2
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //Enables the systick clock source as internal.
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f043 0204 	orr.w	r2, r3, #4
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1 << 0); //Enables the systick timer.
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f043 0201 	orr.w	r2, r3, #1
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	601a      	str	r2, [r3, #0]


}
 800034c:	bf00      	nop
 800034e:	371c      	adds	r7, #28
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000e014 	.word	0xe000e014
 800035c:	00f42400 	.word	0x00f42400
 8000360:	e000e010 	.word	0xe000e010

08000364 <init_schd_task>:
 * This attribute instructs the compiler to omit the standard prologue and epilogue code
 * that it typically generates for function entry and exit.
 * As a result, the function contains no automatic stack frame setup or teardown,
 * providing the developer with complete control over the function's assembly code.
 */
__attribute__((naked)) void init_schd_task(uint32_t schd_stack_start){
 8000364:	4603      	mov	r3, r0

	//set the address of the MSP to the scheduler stack start address.
	__asm volatile ("MSR MSP, %0": : "r" (schd_stack_start) : );
 8000366:	f383 8808 	msr	MSP, r3

	//Since this is a naked function and there are no prologue and epilogue code, we need to safely exit the function
	__asm volatile ("BX LR"); //Let's return from function call
 800036a:	4770      	bx	lr

}
 800036c:	bf00      	nop
	...

08000370 <init_stack_tasks>:
/*
 * Let's initialise the stack of the tasks: T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START
 *
 */
void init_stack_tasks(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0

	uint32_t *pPSP;

	for(int i=0;i<MAX_TASKS;i++)
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	e032      	b.n	80003e2 <init_stack_tasks+0x72>
	{
		//Init the first address of the task.
		pPSP = (uint32_t*)task_psp_holder[i];
 800037c:	4a1e      	ldr	r2, [pc, #120]	@ (80003f8 <init_stack_tasks+0x88>)
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	60fb      	str	r3, [r7, #12]

		//decrement and initialize the xPSR
		pPSP--;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	3b04      	subs	r3, #4
 800038a:	60fb      	str	r3, [r7, #12]
		*pPSP=DUMMY_XPSR;
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000392:	601a      	str	r2, [r3, #0]

		//decrement and initialize the PC
		pPSP--;
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	3b04      	subs	r3, #4
 8000398:	60fb      	str	r3, [r7, #12]
		*pPSP=task_handler_holder[i];
 800039a:	4a18      	ldr	r2, [pc, #96]	@ (80003fc <init_stack_tasks+0x8c>)
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	601a      	str	r2, [r3, #0]

		//decrement and initialize the LR register
		pPSP--; //store address of function as PC
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3b04      	subs	r3, #4
 80003aa:	60fb      	str	r3, [r7, #12]
		*pPSP=0xFFFFFFFD;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f06f 0202 	mvn.w	r2, #2
 80003b2:	601a      	str	r2, [r3, #0]


		for(int j=0;j < 13; j++) //R0 - R12
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	e008      	b.n	80003cc <init_stack_tasks+0x5c>
		{
			pPSP--;
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3b04      	subs	r3, #4
 80003be:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
		for(int j=0;j < 13; j++) //R0 - R12
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	3301      	adds	r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b0c      	cmp	r3, #12
 80003d0:	ddf3      	ble.n	80003ba <init_stack_tasks+0x4a>
		}
		task_psp_holder[i] = (uint32_t)pPSP;
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	4908      	ldr	r1, [pc, #32]	@ (80003f8 <init_stack_tasks+0x88>)
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<MAX_TASKS;i++)
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	3301      	adds	r3, #1
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	ddc9      	ble.n	800037c <init_stack_tasks+0xc>
	}


}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	20000000 	.word	0x20000000
 80003fc:	2000002c 	.word	0x2000002c

08000400 <processor_fault_enable>:


void processor_fault_enable(){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000406:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <processor_fault_enable+0x3c>)
 8000408:	607b      	str	r3, [r7, #4]

	//Memory fault enable
	*pSHCSR |= (1 << 16);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]

	//Bus fault enable
	*pSHCSR |= (1 << 17);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	601a      	str	r2, [r3, #0]

	//Usage fault enable
	*pSHCSR |= (1 << 18);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	601a      	str	r2, [r3, #0]

}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	e000ed24 	.word	0xe000ed24

08000440 <get_psp_current_value>:

uint32_t get_psp_current_value(){
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

	return task_psp_holder[current_task];
 8000444:	4b05      	ldr	r3, [pc, #20]	@ (800045c <get_psp_current_value+0x1c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	4b05      	ldr	r3, [pc, #20]	@ (8000460 <get_psp_current_value+0x20>)
 800044c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8000450:	4618      	mov	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	2000003c 	.word	0x2000003c
 8000460:	20000000 	.word	0x20000000

08000464 <set_sp_to_psp>:

__attribute__((naked)) void set_sp_to_psp(){

	//Get the current PSP first
	__asm volatile ("PUSH {LR}"); //So as not to correct the correct return address to main after the BL instruction, lets secure the main link address first
 8000464:	b500      	push	{lr}
	__asm volatile ("BL get_psp_current_value"); //Let's call function get_psp_current_value. The returned PSP value would be returned to the R0 register of the processor.
 8000466:	f7ff ffeb 	bl	8000440 <get_psp_current_value>
	__asm volatile ("MSR PSP, R0"); //
 800046a:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}"); //Let's retrieve the initially pushed main LR value/address.
 800046e:	f85d eb04 	ldr.w	lr, [sp], #4


	//Goto to the control register and set the second bit field [1], (SPSEL) as 1 in order to change SP to PSP.

	__asm volatile ("MOV R0, #0x02"); //mov the value 0x02 to the R0 register.
 8000472:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0"); //set the CONTROL register with the value of R0
 8000476:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800047a:	4770      	bx	lr

}
 800047c:	bf00      	nop
	...

08000480 <save_psp_current_value>:


void save_psp_current_value(uint32_t curr_psp){
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

	task_psp_holder[current_task] = curr_psp;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <save_psp_current_value+0x24>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	4619      	mov	r1, r3
 800048e:	4a06      	ldr	r2, [pc, #24]	@ (80004a8 <save_psp_current_value+0x28>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	2000003c 	.word	0x2000003c
 80004a8:	20000000 	.word	0x20000000

080004ac <update_the_next_task>:

void update_the_next_task(){
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

	current_task++;
 80004b0:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <update_the_next_task+0x28>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <update_the_next_task+0x28>)
 80004ba:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS; //Round robin fashion.
 80004bc:	4b05      	ldr	r3, [pc, #20]	@ (80004d4 <update_the_next_task+0x28>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	f003 0303 	and.w	r3, r3, #3
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b03      	ldr	r3, [pc, #12]	@ (80004d4 <update_the_next_task+0x28>)
 80004c8:	701a      	strb	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	2000003c 	.word	0x2000003c

080004d8 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(){

	/*Save context of current running task.*/

	//1. get current running task's SP value.
	__asm volatile ("MRS R0, PSP");
 80004d8:	f3ef 8009 	mrs	r0, PSP
	//2. Use the retrieved PSP value and retrieve the stack frame(R4 - R11).
	__asm volatile ("STMDB R0!, {R4-R11}"); //Safely save these registers.
 80004dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//3. Save the current value of the PSP.
	__asm volatile ("PUSH {LR}"); //Save LR value first
 80004e0:	b500      	push	{lr}
	__asm volatile ("BL save_psp_current_value");  //This calls the function, and passes R0 as argument.
 80004e2:	f7ff ffcd 	bl	8000480 <save_psp_current_value>


	/*Retrieve the context of the next task.*/
	//1. Decide next task to run.
	__asm volatile ("BL update_the_next_task");
 80004e6:	f7ff ffe1 	bl	80004ac <update_the_next_task>
	//2. Gets its past PSP value.
	__asm volatile ("BL get_psp_current_value");
 80004ea:	f7ff ffa9 	bl	8000440 <get_psp_current_value>
	//3. Using that PSP value retrieve the stack frame(R4 - R11).
	__asm volatile ("LDMIA R0!, {R4-R11}"); //Loads and stores multiple registers (R4 - R11) incrementally
 80004ee:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4. Update PSP and exit
	__asm volatile ("MSR PSP, R0"); //This PSP is pointing to the stack area of the next task to run.
 80004f2:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 80004f6:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("BX LR"); //Safely exit
 80004fa:	4770      	bx	lr

}
 80004fc:	bf00      	nop

080004fe <MemManage_Handler>:

void MemManage_Handler(){
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
//	printf("Mem fault detected!! ");
	while(1);
 8000502:	bf00      	nop
 8000504:	e7fd      	b.n	8000502 <MemManage_Handler+0x4>

08000506 <BusFault_Handler>:

}

void BusFault_Handler(){
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
//	printf("Bus fault detected!! ");
	while(1);
 800050a:	bf00      	nop
 800050c:	e7fd      	b.n	800050a <BusFault_Handler+0x4>

0800050e <UsageFault_Handler>:

}

void UsageFault_Handler(){
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
//	printf("Mem fault detected!! ");
	while(1);
 8000512:	bf00      	nop
 8000514:	e7fd      	b.n	8000512 <UsageFault_Handler+0x4>

08000516 <delay>:
#include "my_led.h"



void delay(uint32_t count)
{
 8000516:	b480      	push	{r7}
 8000518:	b085      	sub	sp, #20
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e002      	b.n	800052a <delay+0x14>
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3301      	adds	r3, #1
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	429a      	cmp	r2, r3
 8000530:	d3f8      	bcc.n	8000524 <delay+0xe>
}
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <led_init>:

void led_init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
	//RCC Bus clock
	uint32_t *pRccAhb1enr = (uint32_t*)RCC_AHB1ENR;
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <led_init+0x58>)
 8000548:	60fb      	str	r3, [r7, #12]

	*pRccAhb1enr |= ( 1 << GPIOB_EN); //GPIO B clock enable
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f043 0202 	orr.w	r2, r3, #2
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	601a      	str	r2, [r3, #0]
	*pRccAhb1enr |= ( 1 << GPIOC_EN); //GPIO C clock enable
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 0204 	orr.w	r2, r3, #4
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	601a      	str	r2, [r3, #0]




	//GPIOB moder register
	uint32_t *pGpiobModeReg = (uint32_t*)GPIOB_MODER;
 8000562:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <led_init+0x5c>)
 8000564:	60bb      	str	r3, [r7, #8]
	//configure LED_GREEN
	*pGpiobModeReg |= ( 1 << (2 * LED_GREEN));
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	601a      	str	r2, [r3, #0]


	//GPIOC moder register
	uint32_t *pGpiocModeReg = (uint32_t*)GPIOC_MODER;
 8000572:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <led_init+0x60>)
 8000574:	607b      	str	r3, [r7, #4]
	//configure LED_RED
	*pGpiocModeReg |= ( 1 << (2 * LED_RED));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]



    led_off(LT_GREEN);
 8000582:	2002      	movs	r0, #2
 8000584:	f000 f834 	bl	80005f0 <led_off>
    led_off(LT_RED);
 8000588:	2003      	movs	r0, #3
 800058a:	f000 f831 	bl	80005f0 <led_off>
}
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40023830 	.word	0x40023830
 800059c:	40020400 	.word	0x40020400
 80005a0:	40020800 	.word	0x40020800

080005a4 <led_on>:




void led_on(led_type_e led)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	if(led == LT_GREEN){
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d108      	bne.n	80005c6 <led_on+0x22>

	  uint32_t *pGpiobDataReg = (uint32_t*)GPIOB_ODR;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <led_on+0x44>)
 80005b6:	60bb      	str	r3, [r7, #8]
	  *pGpiobDataReg |= ( 1 << LED_GREEN);
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	601a      	str	r2, [r3, #0]
	  uint32_t *pGpiocDataReg = (uint32_t*)GPIOC_ODR;
	  *pGpiocDataReg |= ( 1 << LED_RED);

	}

}
 80005c4:	e00a      	b.n	80005dc <led_on+0x38>
	else if (led == LT_RED){
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	d107      	bne.n	80005dc <led_on+0x38>
	  uint32_t *pGpiocDataReg = (uint32_t*)GPIOC_ODR;
 80005cc:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <led_on+0x48>)
 80005ce:	60fb      	str	r3, [r7, #12]
	  *pGpiocDataReg |= ( 1 << LED_RED);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f043 0220 	orr.w	r2, r3, #32
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	601a      	str	r2, [r3, #0]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	40020414 	.word	0x40020414
 80005ec:	40020814 	.word	0x40020814

080005f0 <led_off>:



void led_off(led_type_e led)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]

  	if(led == LT_GREEN){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d108      	bne.n	8000612 <led_off+0x22>

  	  uint32_t *pGpiobDataReg = (uint32_t*)GPIOB_ODR;
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <led_off+0x44>)
 8000602:	60bb      	str	r3, [r7, #8]
  	  *pGpiobDataReg &= ~( 1 << LED_GREEN);
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	601a      	str	r2, [r3, #0]
  	  uint32_t *pGpiocDataReg = (uint32_t*)GPIOC_ODR;
  	  *pGpiocDataReg &= ~( 1 << LED_RED);

  	}

}
 8000610:	e00a      	b.n	8000628 <led_off+0x38>
  	else if (led == LT_RED){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d107      	bne.n	8000628 <led_off+0x38>
  	  uint32_t *pGpiocDataReg = (uint32_t*)GPIOC_ODR;
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <led_off+0x48>)
 800061a:	60fb      	str	r3, [r7, #12]
  	  *pGpiocDataReg &= ~( 1 << LED_RED);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f023 0220 	bic.w	r2, r3, #32
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	601a      	str	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	40020414 	.word	0x40020414
 8000638:	40020814 	.word	0x40020814

0800063c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000640:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480c      	ldr	r0, [pc, #48]	@ (8000678 <LoopForever+0x6>)
  ldr r1, =_edata
 8000646:	490d      	ldr	r1, [pc, #52]	@ (800067c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000648:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <LoopForever+0xe>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800065c:	4c0a      	ldr	r4, [pc, #40]	@ (8000688 <LoopForever+0x16>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800066a:	f000 f811 	bl	8000690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066e:	f7ff fdbd 	bl	80001ec <main>

08000672 <LoopForever>:

LoopForever:
  b LoopForever
 8000672:	e7fe      	b.n	8000672 <LoopForever>
  ldr   r0, =_estack
 8000674:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000680:	080006f8 	.word	0x080006f8
  ldr r2, =_sbss
 8000684:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000688:	20000040 	.word	0x20000040

0800068c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC_IRQHandler>
	...

08000690 <__libc_init_array>:
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	4d0d      	ldr	r5, [pc, #52]	@ (80006c8 <__libc_init_array+0x38>)
 8000694:	4c0d      	ldr	r4, [pc, #52]	@ (80006cc <__libc_init_array+0x3c>)
 8000696:	1b64      	subs	r4, r4, r5
 8000698:	10a4      	asrs	r4, r4, #2
 800069a:	2600      	movs	r6, #0
 800069c:	42a6      	cmp	r6, r4
 800069e:	d109      	bne.n	80006b4 <__libc_init_array+0x24>
 80006a0:	4d0b      	ldr	r5, [pc, #44]	@ (80006d0 <__libc_init_array+0x40>)
 80006a2:	4c0c      	ldr	r4, [pc, #48]	@ (80006d4 <__libc_init_array+0x44>)
 80006a4:	f000 f818 	bl	80006d8 <_init>
 80006a8:	1b64      	subs	r4, r4, r5
 80006aa:	10a4      	asrs	r4, r4, #2
 80006ac:	2600      	movs	r6, #0
 80006ae:	42a6      	cmp	r6, r4
 80006b0:	d105      	bne.n	80006be <__libc_init_array+0x2e>
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b8:	4798      	blx	r3
 80006ba:	3601      	adds	r6, #1
 80006bc:	e7ee      	b.n	800069c <__libc_init_array+0xc>
 80006be:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c2:	4798      	blx	r3
 80006c4:	3601      	adds	r6, #1
 80006c6:	e7f2      	b.n	80006ae <__libc_init_array+0x1e>
 80006c8:	080006f0 	.word	0x080006f0
 80006cc:	080006f0 	.word	0x080006f0
 80006d0:	080006f0 	.word	0x080006f0
 80006d4:	080006f4 	.word	0x080006f4

080006d8 <_init>:
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	bf00      	nop
 80006dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006de:	bc08      	pop	{r3}
 80006e0:	469e      	mov	lr, r3
 80006e2:	4770      	bx	lr

080006e4 <_fini>:
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e6:	bf00      	nop
 80006e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ea:	bc08      	pop	{r3}
 80006ec:	469e      	mov	lr, r3
 80006ee:	4770      	bx	lr
